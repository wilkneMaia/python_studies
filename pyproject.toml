[tool.poetry]
name = "python-studies"
version = "0.1.0"
description = ""
authors = ["Wilkne Maia <72803395+wilkneMaia@users.noreply.github.com>"]
readme = "README.md"
packages = [{ include = "python_studies" }]

[tool.poetry.dependencies]
python = "^3.11"
pypdf = "^3.9.1"
reportlab = "^4.0.4"
pandas = "^2.0.2"
prettycolorprinter = "^0.43"
numexpr = "^2.8.4"
pypdf3 = "^1.0.6"
pdfminer = "^20191125"
cairosvg = "^2.7.0"
svglib = "^1.5.1"
pdfkit = "^1.0.0"
wkhtmltopdf = "^0.2"
weasyprint = "^59.0"
openpyxl = "^3.1.2"
tabula-py = "^2.8.1"
pdfplumber = "^0.10.2"
opencv-python = "^4.8.1.78"
ipykernel = "^6.29.4"
pymupdf = "^1.24.5"
spacy = "^3.7.4"
pytesseract = "^0.3.10"
pdf2image = "^1.17.0"


[tool.poetry.group.dev.dependencies]
ipykernel = "^6.23.1"


[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.3.1"     # Allows for testing of the project
pytest-cov = "^4.1.0" # Allows to run coverage of the project
moto = "^4.1.11"


[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "^6.0.0"                                  # Style Guide Enforcement
pyproject-flake8 = "^6.0.0.post1"                  # Allows configuration of flake 8 from pyproject.toml
flake8-bugbear = "^23.6.5"                         # Finding likely bugs and design problems in your program.
flake8-print = "^5.0.0"                            # Check for print statements in python files.
flake8-docstrings = "^1.7.0"                       # Include checks provided by pep257.
flake8-annotations = "^3.0.1"                      # check for presence of type annotations in function definitions.
isort = "^5.12.0"                                  # Sort imports
yamllint = "^1.32.0"                               # Linter for YAML files
bandit = { version = "^1.7.5", extras = ["toml"] } # Security linter
pre-commit = "^3.3.3"                              # Runs a pipeline before commiting code
commitizen = "^3.3.0"                              # Check commit messages
cz-github-jira-conventional = "^1.1.1"             # Extension to commitizen to check for JIRA ticket number
black = "^23.3.0"                                  # Python style checks

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 119
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | \.env
  | cdk.out
  | \.vscode
  | build
  | dist
  | \.mypy_cache
)\
'''


[tool.isort]
profile = 'black'
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2
src_paths = ["src", "tests"]
line_length = 119

[tool.flake8]
max-line-length = 119
select = [ # Choose the flake8 errors to select globally here
    "C",    # McCabe complexity
    "E",    # pep8 errors
    "W",    # pep8 warnings
    "F",    # pyflakes errors
    "N",    # naming conventions
    "B",    # bugbear errors (needs plugin installed)
    "ANN",  # flake8 annotations errors (needs plugin installed)
    "T",    # flake8 print errors (needs plugin installed)
    "D",    # flake8 doscstrings errors (needs plugin installed)
    "B950", #  Line too long. It considers "max-line-length" but only triggers when exceeded by more than 10%.
]
ignore = [ # Choose the flake8 errors to ignore globally here
    "E501",   # Line too long  (using B950 instead, which has 10% tolerance)
    "D107",   # Missing docstring in __init__
    "D202",   # No blank lines allowed after function docstring
    "D400",   # First line should end with a period
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "ANN003", # Missing type annotation for **kwargs
    "ANN002", # Missing type annotation for **args
    "ANN1",   # Missing type annotation for self in methot or cls method
]
per-file-ignores = [ # Choose the flake8 errors to ignore per file here
    "*/__init__.py:F401", # Ignore imported but unused in __init__.py files
    "tests/*:ANN,D",      # Ignore Docstring and annotations on tests
]
exclude = [".venv/*", ".vscode/*", "cdk.out/*"]
# See other flake8 extensions here: https://github.com/DmytroLitvinov/awesome-flake8-extensions


[tool.bandit]
skips = [ # Choose the bandit errors to ignore globally
    "B101", # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
]
exclude_dirs = [".venv", "cdk.out"]


[tool.pytest.ini_options]
minversion = "7.1"
addopts = """
  --verbose
  --color=yes
  --assert=plain
  --cov-report term
  --cov=src
  --last-failed
"""
testpaths = ["tests", "src"]

[tool.coverage.run]
omit = ["*/tests/*"] # Remove test files from coverage run.

[tool.coverage.report]
omit = ["*/tests/*"] # Remove test files from coverage report.

[tool.commitizen]
name = "cz_github_jira_conventional"
version = "0.1.0"
ag_format = "$major.$minor.$patch$prerelease"
version_files = ["pyproject.toml:version"]
jira_prefix = "DH-"
jira_base_url = "https://util.atlassian.net/"
# github_repo = "andresionek91/supletivo-data-hackers-AWS-CDK"
