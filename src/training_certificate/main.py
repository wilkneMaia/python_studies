import base64
import io
import os
import xml.etree.ElementTree as ET

from io import BytesIO
from pathlib import Path

import pdfkit
import PyPDF3

from PIL import Image
from pypdf import PdfMerger
from reportlab.graphics import renderPDF
from reportlab.lib.pagesizes import letter
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen import canvas
from svglib.svglib import svg2rlg


# from xhtml2pdf import pisa


def replace_multiple(text, replacements):
    for old, new in replacements.items():
        text = text.replace(old, new)
    return text

# from weasyprint import HTML


# def svg_to_pdf(svg_file, element_id, new_value, pdf_file):
#     # Parse the SVG file
#     tree = ET.parse(svg_file)
#     root = tree.getroot()

#     with open(svg_file) as f:
#         template_certificate = f.read()

#     certificate_html = replace_multiple(template_certificate, {
#         '__NAME__': "Wilkne",
#     })

#     # # Get the namespace from the root element
#     # namespace = root.tag.split('}')[0].strip('{')

#     # # Find the element with the specified ID
#     # element = root.find(
#     #     f".//*[@id='{element_id}']", namespaces={'ns': namespace})

#     # # Replace the text content of the element with the new value
#     # if element is not None:
#     #     element.text = new_value

#     # Write the modified SVG back to the file
#     tree.write(svg_file)

#     # Convert the SVG file to a ReportLab Drawing object
#     drawing = svg2rlg(svg_file)

#     # Render the Drawing object to a PDF file
#     renderPDF.drawToFile(drawing, pdf_file)


# if __name__ == "__main__":
#     svg_to_pdf('cert_rac_5.svg', 'NOME',
#                'Francisco Wilkne do Amaral Maia', 'certificate.pdf')


def html_to_pdf(html_file, pdf_file):
    try:
        with open(html_file, 'r') as input_file, open(pdf_file, 'wb') as output_file:
            # Converte o conteúdo HTML em um arquivo PDF
            pisa.CreatePDF(input_file.read(), output_file)
        print(f"O arquivo '{pdf_file}' foi criado com sucesso!")
    except Exception as e:
        print(f"Ocorreu um erro ao converter o HTML para PDF: {e}")
# if __name__ == "__main__":
#     # Example usage:
#     html_to_pdf('cert_rac_5.html', 'output.pdf')


def add_text_to_pdf(pdf_path, name, registration, date, signature, collaborator_role, workload, trainer, font_name='Helvetica', font_size=12, text_color=(0, 0, 0), signature_width=None, signature_height=None):
    # Decodifica a string base64 para obter os bytes da imagem
    img = Image.open(io.BytesIO(base64.b64decode(signature)))

    # Redimensiona a imagem se necessário
    if signature_width is not None or signature_height is not None:
        img = img.resize(
            (signature_width or img.width, signature_height or img.height))

    img_reader = ImageReader(img)

    with open(pdf_path, 'rb') as pdf_file:
        pdf_reader = PyPDF3.PdfFileReader(pdf_file)
        pdf_writer = PyPDF3.PdfFileWriter()

        for page_num in range(pdf_reader.getNumPages() - 1):
            page_obj = pdf_reader.getPage(page_num)
            pdf_writer.addPage(page_obj)

        # Cria um objeto de texto
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        # Posição do texto na página (em pontos)
        can.setFillColorRGB(*text_color)  # Define a cor do texto
        # Define a fonte e o tamanho da fonte
        can.setFont(font_name, font_size)
        can.drawString(69, 488, name)
        can.drawString(90, 468, registration)
        can.drawString(69, 448, date)
        can.drawImage(img_reader, 325, 488, mask='auto')
        can.drawString(310, 468, collaborator_role)
        can.drawString(350, 448, workload)
        can.drawString(460, 448, trainer)
        can.save()

        packet.seek(0)
        new_pdf = PyPDF3.PdfFileReader(packet)
        page_new = new_pdf.getPage(0)

        last_page = pdf_reader.getPage(pdf_reader.getNumPages() - 1)
        last_page.mergePage(page_new)
        pdf_writer.addPage(last_page)

        # Define o nome do arquivo PDF de saída
        output_dir = '/Users/wilkne/Desktop/training/'
        output_file_name = os.path.join(output_dir, 'pdf_output.pdf')

        # Verifica se o diretório de saída existe e cria se necessário
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # Salva o arquivo PDF resultante na pasta especificada
        with open(output_file_name, 'wb') as pdf_output_file:
            pdf_writer.write(pdf_output_file)


if __name__ == "__main__":
    #
    pdf_path = 'OSSMA_01.pdf'
    text_name = "Francisco Wilkne do Amaral Maia"
    registration = "222222"
    text_date = "22/02/2023"
    signature = ""
    collaborator_role = "Tec. Planjeamento"
    workload = '40h'
    text_trainer = "Francisco Maia"
    font_name = 'Helvetica'
    font_size = 12
    text_color = (0.2, 0.4, 0.6)

    add_text_to_pdf(pdf_path, text_name, registration, text_date, signature,
                    collaborator_role, workload, text_trainer, font_name, font_size, text_color, 120, 32)


# def merge_pdfs(report_dir, pdf1_path, pdf2_path, output_name):
#     report_path = report_dir / pdf1_path
#     toc_path = report_dir / pdf2_path

#     pdf_merger = PdfMerger()
#     pdf_merger.append(report_path)

#     pdf_merger.merge(1, toc_path)

#     pdf_merger.write(output_name)
# # if __name__ == "__main__":
# #     report_dir = Path.cwd()
# #     merge_pdfs(report_dir, "Francisco_Wilkne_Do_Amaral_Maia_RAC_05.pdf",
# #                "pdf_output.pdf", "full_report.pdf")
